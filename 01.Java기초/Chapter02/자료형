자료형

기본형 : 자바언어에서 기본적으로 제공해주는 자료형   
		메모리의 크기가 정해져 있음 
		정수형, 문자형 ...

참조형 : 클래스 자료형	
		jdk 에서 제공되는 클래스으와 프로그래머가 정의하는 클래스 

	
8bit 1byte 
byte	정수형	문자형	실수형	논리형
1		byte					boolean
2		short	char	
4		int				float
8		long			double 


문자 자료형 
내부적으로는 비트의 조합으로 표현 
인코딩 - 각 문자에 따른 특정한 숫자 값(코드 값)을 부여 
디코딩 - 숫자 값을 원래의 문자로 표현 

문자 세트 
문자세트 : 문다를 위한 코드 값(숫자 값)들을 정해 놓은 세트 
아스키(ASCII) : 1바이트로 영문자, 숫자, 특수문자 등을 표현 함
유니코드(Unicode) : 한글과 같은 복잡한 언어를 표현하기 위한 표준 인코딩 (utf-8 utf-16)

문자를 변수에 저장하면? 문자에 해당하는 코드 값이 저장됨 

상수와 리터럴
상수(constant): 변하지 않는 수
리터럴(literal):프로그램에서 사용하는 모든 숫자, 값, 논리 값
모든 리터럴은 상수 풀 (constant pool)에 저장되어 있음 
상수 풀에 저장될 때는 정수는 int, 실수는 double로 저장됨 

형 변환 
서로 다른 자료형의 값이 대입되는 경우 형 변환이 일어남 
묵시적 형 변환 
	: 작은 수에서 큰 수로 덜 정밀한 수에서 더 정밀한 수로 대입되는 경우

명시적 형 변환
	: 변환되는 자료형을 명시 
      자료의 손실이 발생 할 수 있음 
    
객체의 참조 변수에도 위와 같이 형변환이 가능하다
- 부모 타입의 객체 = 자식 타입의 객체, 이를 묵시적 형변환이라고 한다.
- 자식 타입의 객체 = (자식 타입) 부모타입, 이를 명시적 형변환이라고 한다.

Employee e = new Employee();
Manager m = new Manager();
e = m; //묵시적 형변환
m = (Manager)e; //명시적 형변환
Emplyee e2 = new Manager();
 // 상위 클래스의 메소를 하위클래스에서 오버라이딩 했을 경우 하위클래스에 선언된 메소드가 호출됨
 // 생성된 객체는 Manager이지만 참조 변수의 타입이 Employee이므로, 접근 가능한 변수와 메서드는 같이 Employee 객체로 제한
manager m2 = (manager)e2;
// m2는 Manager 타입이므로 e2가 참조하고 있던 Manager 객체의 모든 멤버 필드와 메서드에 접근 가능
// 상위 클래스타입(Employee) 자리에 올 수 있는 객체는 실제 가리키는 메모리가 하위 클래스 타입이어야 가능 
Employee e = new Manager();
Manager m = (manager)e;
이런 경우에만 가능하다. 


출처: https://data-make.tistory.com/214 [Data Makes Our Future]


출처: https://data-make.tistory.com/214 [Data Makes Our Future]
- instanceof 연산자라고 부르며 연산의 결과에 따라 true/false를 반환한다.

- 사용방법은 다음과 같다.
Manager m = new Manager();
Employee e = new Employee();
System.out.println(m instanceof Manager); //true
System.out.println(m instanceof Employee); //true
System.out.println(e instanceof Manager); //false